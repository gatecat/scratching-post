From e7a4746fb2d58923bcdd9d1b2e5d345969d79dfc Mon Sep 17 00:00:00 2001
From: Myrtle Shah <gatecat@ds0.me>
Date: Sun, 23 Jan 2022 20:58:41 +0000
Subject: [PATCH 7/7] riscv: Add memory layout for 32-bit XIP kernels

The standard linear mapping used for 32-bit RISC-V kernels is not
compatible with XIP.

The mapping is modified to put the kernel code in ROM between
PAGE_OFFSET and PAGE_OFFSET+XIP_OFFSET, and then RAM starting from
PAGE_OFFSET+XIP_OFFSET onwards.

This patch also ensures that for XIP kernels, the physical address of
the DTB (which might be in a different area of ROM to the kernel) has a
corresponding virtual mapping.

Signed-off-by: Myrtle Shah <gatecat@ds0.me>
---
 arch/riscv/include/asm/page.h | 25 +++++++++++++++++++
 arch/riscv/mm/init.c          | 46 ++++++++++++++++++++++++++++++-----
 2 files changed, 65 insertions(+), 6 deletions(-)

diff --git a/arch/riscv/include/asm/page.h b/arch/riscv/include/asm/page.h
index b3e5ff0125fe..338baf789b7a 100644
--- a/arch/riscv/include/asm/page.h
+++ b/arch/riscv/include/asm/page.h
@@ -109,7 +109,22 @@ extern phys_addr_t phys_ram_base;
 #define is_linear_mapping(x)	\
 	((x) >= PAGE_OFFSET && (!IS_ENABLED(CONFIG_64BIT) || (x) < kernel_map.virt_addr))
 
+/*
+ * For 32-bit XIP kernels, the 'linear' mapping up to XIP offset is actually redirected
+ * to the kernel code in ROM rather than a linear mapping in RAM. The true linear RAM
+ * range starts at (PAGE_OFFSET + XIP_OFFSET)
+ */
+#if defined(CONFIG_XIP_KERNEL) && !defined(CONFIG_64BIT)
+#define linear_mapping_pa_to_va(y)  ({                                                \
+       unsigned long _y = y;                                                          \
+       (_y < phys_ram_base) ?                                                         \
+               (void *)((unsigned long)(_y) + (PAGE_OFFSET - kernel_map.xiprom)) :    \
+               (void *)((unsigned long)(_y) + kernel_map.va_pa_offset + XIP_OFFSET);  \
+       })
+#else
 #define linear_mapping_pa_to_va(x)	((void *)((unsigned long)(x) + kernel_map.va_pa_offset))
+#endif
+
 #define kernel_mapping_pa_to_va(y)	({						\
 	unsigned long _y = y;								\
 	(IS_ENABLED(CONFIG_XIP_KERNEL) && _y < phys_ram_base) ?					\
@@ -118,7 +133,17 @@ extern phys_addr_t phys_ram_base;
 	})
 #define __pa_to_va_nodebug(x)		linear_mapping_pa_to_va(x)
 
+#if defined(CONFIG_XIP_KERNEL) && !defined(CONFIG_64BIT)
+#define linear_mapping_va_to_pa(y)  ({                                         \
+       unsigned long _y = y;                                                   \
+       (_y < PAGE_OFFSET + XIP_OFFSET) ?                                       \
+               (((unsigned long)(_y) - PAGE_OFFSET) + kernel_map.xiprom) :     \
+               ((unsigned long)(_y) - kernel_map.va_pa_offset - XIP_OFFSET);   \
+       })
+#else
 #define linear_mapping_va_to_pa(x)	((unsigned long)(x) - kernel_map.va_pa_offset)
+#endif
+
 #define kernel_mapping_va_to_pa(y) ({						\
 	unsigned long _y = y;							\
 	(IS_ENABLED(CONFIG_XIP_KERNEL) && _y < kernel_map.virt_addr + XIP_OFFSET) ?	\
diff --git a/arch/riscv/mm/init.c b/arch/riscv/mm/init.c
index ea5de0b0c724..4bf181a0e653 100644
--- a/arch/riscv/mm/init.c
+++ b/arch/riscv/mm/init.c
@@ -705,7 +705,7 @@ asmlinkage void __init setup_vm(uintptr_t dtb_pa)
 
 static void __init setup_vm_final(void)
 {
-	uintptr_t va, map_size;
+	uintptr_t va, map_size, end_va, adj_offset;
 	phys_addr_t pa, start, end;
 	u64 i;
 
@@ -724,15 +724,26 @@ static void __init setup_vm_final(void)
 			   __pa_symbol(fixmap_pgd_next),
 			   PGDIR_SIZE, PAGE_TABLE);
 
+	/**
+	 * For 32-bit XIP kernels, the linear mapping starts at
+	 * PAGE_OFFSET + XIP_OFFSET - below that is the kernel code ROM mapping.
+	 */
+#if defined(CONFIG_XIP_KERNEL) && !defined(CONFIG_64BIT)
+	adj_offset = PAGE_OFFSET + XIP_OFFSET;
+#else
+	adj_offset = PAGE_OFFSET;
+#endif
+
+
 	/* Map all memory banks in the linear mapping */
 	for_each_mem_range(i, &start, &end) {
 		if (start >= end)
 			break;
-		if (start <= __pa(PAGE_OFFSET) &&
-		    __pa(PAGE_OFFSET) < end)
-			start = __pa(PAGE_OFFSET);
-		if (end >= __pa(PAGE_OFFSET) + memory_limit)
-			end = __pa(PAGE_OFFSET) + memory_limit;
+		if (start <= __pa(adj_offset) &&
+		    __pa(adj_offset) < end)
+			start = __pa(adj_offset);
+		if (end >= __pa(adj_offset) + memory_limit)
+			end = __pa(adj_offset) + memory_limit;
 
 		map_size = best_map_size(start, end - start);
 		for (pa = start; pa < end; pa += map_size) {
@@ -746,6 +757,29 @@ static void __init setup_vm_final(void)
 #ifdef CONFIG_64BIT
 	/* Map the kernel */
 	create_kernel_page_table(swapper_pg_dir, false);
+#elif defined(CONFIG_XIP_KERNEL)
+	/* Map XIP kernel code in ROM, starting at virtual address PAGE_OFFSET */
+	end_va = PAGE_OFFSET + kernel_map.xiprom_sz;
+	for (va = PAGE_OFFSET; va < end_va; va += PMD_SIZE) {
+		create_pgd_mapping(swapper_pg_dir, va,
+						kernel_map.xiprom + (va - kernel_map.virt_addr), 
+						PMD_SIZE, PAGE_KERNEL_EXEC);
+	}
+
+#ifndef CONFIG_BUILTIN_DTB
+	/**
+	 * For a XIP setup, the DTB might be stored in ROM, for example after
+	 * the kernel image. Make sure its physical address has a corresponding
+	 * virtual mapping, too. */
+	if (dtb_early_pa >= kernel_map.xiprom
+			&& dtb_early_pa < (kernel_map.xiprom + XIP_OFFSET)) {
+		create_pgd_mapping(swapper_pg_dir,
+			(PAGE_OFFSET + (dtb_early_pa - kernel_map.xiprom)) & ~(PMD_SIZE - 1),
+			dtb_early_pa & ~(PMD_SIZE - 1), 
+			PMD_SIZE, PAGE_KERNEL_EXEC);
+	}
+#endif
+
 #endif
 
 	/* Clear fixmap PTE and PMD mappings */
-- 
2.34.1

